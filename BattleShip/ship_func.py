class Ship():
    def __init__(self, type, start, vector, deck, dekc_war):
        self.status = 3           # –î–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —á—Ç–æ —ç—Ç–æ –∫–æ—Ä–∞–±–ª—å.
        self.health = type        # –¢–∏–ø –∫–æ—Ä–∞–±–ª—è, –æ–Ω –∂–µ –µ–≥–æ –∑–¥–æ—Ä–æ–≤—å–µ.
        self.start_index = start  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ–∑–∏—Ü–∏–∏ –∫–æ—Ä–∞–±–ª—è.
        self.deck = deck          # –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–æ—Å–∫–∏ –æ–∫—Ä–∞—Å–∫–∏ –≥—Ä–∞–Ω–∏—Ü.
        self.type = type          # –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.
        self.vector = vector      # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è.
        self.deck_war = dekc_war  # –î–æ—Å–∫–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤.


    def auto_building(self):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —É–∫—Ä–∞–¥–µ–Ω –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ—Ä–∞–±–ª–µ–π, –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏
        –∫–æ—Ä–∞–±–ª—è, –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫.'''
        def ship_point(vector, start_point, ship, deck, deck_war):

            def index_validator(index):

                if deck[index].status != 0:
                    return False

                else:
                    return True

            def ship_check(index):
                if deck[index].status != 3:
                    return True
                else:
                    return False

            start_index = index_validator(start_point)

            if vector == 'up':
                if start_index:
                    # –ø—Ä–æ—Ö–æ–¥–∏–º –≤ —Ü–∏–∫–ª–µ –ø–æ –¥–ª–∏–Ω–µ –∫–æ—Ä–∞–±–ª—è, +1 —á—Ç–æ –±—ã –∑–∞–º–∫–Ω—É—Ç—å –∫–æ–Ω—Ç—É—Ä –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ.
                    valid_num = 0
                    nums = start_point
                    for _ in range(ship):  # –≤ ship –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å –ö–õ–Æ–ß–ò (—Ç–æ –µ—Å—Ç—å —Å–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–µ—Ç–æ–∫)
                        next_index = nums  # –ü–µ—Ä–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö.
                        # –û–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å True, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False –∏ –∏—â–µ–º –¥—Ä—É–≥—É—é —Ç–æ—á–∫—É –∏ –≤–µ–∫—Ç–æ—Ä.
                        point = ship_check(next_index)
                        right_index = ship_check(next_index + 1)
                        lift_index = ship_check(next_index - 1)
                        valid_point = index_validator(next_index)

                        if 12 < next_index < 131:
                            if point and right_index and lift_index and valid_point:
                                valid_num += 1

                        else:
                            return False

                        nums -= 12

                    valid = start_point - ship * 12
                    # –ü—Ä–æ–≤–µ—Ä—è—Ç, –Ω–µ –∑–∞–Ω—è—Ç–∞ –ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–ª–µ—Ç–∫–∞ –∏ –µ—ë —Å–æ—Å–µ–¥–∏.
                    if ship_check(valid) and ship_check(valid + 1) and ship_check(valid - 1):
                        if ship_check(start_point + 12) and ship_check(start_point + 13) and ship_check(
                                start_point + 11):

                            if valid_num == ship:  # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Å–µ –ª–∏ –∫–ª–µ—Ç–∫–∏ –±—ã–ª–∏ –ø—É—Å—Ç—ã –∏ –ø—Ä–∏–≥–æ–¥–Ω—ã –¥–ª—è –∂–∏–∑–Ω–∏ =)

                                korablik = Ship(ship, start_point, vector, deck, deck_war)
                                # deck[start_point].name = 'üûì'
                                # deck[start_point].status = 3
                                deck[start_point] = korablik
                                next_point = start_point
                                for i in range(ship):
                                    deck[next_point] = korablik
                                    # deck[next_point].name = 'üûì'
                                    # deck[next_point].status = 3
                                    next_point -= 12

                                return True

                            else:
                                return False
                        else:
                            return False
                    else:
                        return False

            elif vector == 'down':
                if start_index:
                    valid_num = 0
                    nums = start_point
                    for _ in range(ship):
                        next_index = nums  # –ü–µ—Ä–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö.
                        # –û–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å True, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False –∏ –∏—â–µ–º –¥—Ä—É–≥—É—é —Ç–æ—á–∫—É –∏ –≤–µ–∫—Ç–æ—Ä.
                        point = ship_check(next_index)
                        right_index = ship_check(next_index + 1)
                        lift_index = ship_check(next_index - 1)
                        valid_point = index_validator(next_index)

                        if 12 < next_index < 131:
                            if point and right_index and lift_index and valid_point:
                                valid_num += 1

                        else:

                            return False

                        nums += 12

                    valid = start_point + ship * 12
                    # –ü—Ä–æ–≤–µ—Ä—è—Ç, –Ω–µ –∑–∞–Ω—è—Ç–∞ –ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–ª–µ—Ç–∫–∞ –∏ –µ—ë —Å–æ—Å–µ–¥–∏.
                    if ship_check(valid) and ship_check(valid + 1) and ship_check(valid - 1):
                        if ship_check(start_point - 12) and ship_check(start_point - 13) and ship_check(
                                start_point - 11):

                            if valid_num == ship:  # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Å–µ –ª–∏ –∫–ª–µ—Ç–∫–∏ –±—ã–ª–∏ –ø—É—Å—Ç—ã –∏ –ø—Ä–∏–≥–æ–¥–Ω—ã –¥–ª—è –∂–∏–∑–Ω–∏ =)
                                korablik = Ship(ship, start_point, vector, deck, deck_war)
                                # self.deck[start_point].name = 'üûì'
                                # self.deck[start_point].status = 3
                                deck[start_point] = korablik
                                next_point = start_point
                                for i in range(ship):
                                    deck[next_point] = korablik
                                    # self.deck[next_point].name = 'üûì'
                                    # self.deck[next_point].status = 3
                                    next_point += 12

                                return True

                            else:

                                return False
                        else:

                            return False
                    else:

                        return False
                else:
                    print(f'–î–∞–Ω–Ω—ã–π —Ö–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
                    return False

            elif vector == 'left':
                if start_index:
                    valid_num = 0
                    nums = start_point

                    for _ in range(ship):
                        next_index = nums  # –ü–µ—Ä–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö.
                        # –û–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å True, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False –∏ –∏—â–µ–º –¥—Ä—É–≥—É—é —Ç–æ—á–∫—É –∏ –≤–µ–∫—Ç–æ—Ä.
                        point = ship_check(next_index)
                        right_index = ship_check(next_index + 12)
                        lift_index = ship_check(next_index - 12)
                        valid_point = index_validator(next_index)

                        if 12 < next_index < 131:
                            if point and right_index and lift_index and valid_point:
                                valid_num += 1
                        else:
                            return False
                        nums -= 1

                    valid = start_point - ship
                    valid_start = start_point + 1

                    # –ü—Ä–æ–≤–µ—Ä—è—Ç, –Ω–µ –∑–∞–Ω—è—Ç–∞ –ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–ª–µ—Ç–∫–∞ –∏ –µ—ë —Å–æ—Å–µ–¥–∏.
                    if ship_check(valid) and ship_check(valid + 12) and ship_check(valid - 12):
                        if ship_check(valid_start) and ship_check(valid_start + 12) and ship_check(valid_start - 12):
                            korablik = Ship(ship, start_point, vector, deck, deck_war)
                            if valid_num == ship:  # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Å–µ –ª–∏ –∫–ª–µ—Ç–∫–∏ –±—ã–ª–∏ –ø—É—Å—Ç—ã –∏ –ø—Ä–∏–≥–æ–¥–Ω—ã –¥–ª—è –∂–∏–∑–Ω–∏ =)
                                # deck[start_point].name = 'üûì'
                                # deck[start_point].status = 3
                                deck[start_point] = korablik
                                next_point = start_point

                                for i in range(ship):
                                    deck[next_point] = korablik
                                    # deck[next_point].name = 'üûì'
                                    # deck[next_point].status = 3
                                    next_point -= 1
                                return True
                            else:
                                return False
                        else:
                            return False
                    else:
                        return False

            elif vector == 'right':
                if start_index:
                    valid_num = 0
                    nums = start_point
                    for _ in range(ship):
                        next_index = nums  # –ü–µ—Ä–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö.
                        # –û–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å True, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False –∏ –∏—â–µ–º –¥—Ä—É–≥—É—é —Ç–æ—á–∫—É –∏ –≤–µ–∫—Ç–æ—Ä.
                        point = ship_check(next_index)
                        right_index = ship_check(next_index + 12)
                        lift_index = ship_check(next_index - 12)
                        valid_point = index_validator(next_index)
                        if 12 < next_index < 131:
                            if point and right_index and lift_index and valid_point:
                                valid_num += 1
                        else:
                            return False
                        nums += 1
                    valid = start_point + ship
                    valid_start = start_point - 1
                    # –ü—Ä–æ–≤–µ—Ä—è—Ç, –Ω–µ –∑–∞–Ω—è—Ç–∞ –ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–ª–µ—Ç–∫–∞ –∏ –µ—ë —Å–æ—Å–µ–¥–∏.
                    if ship_check(valid) and ship_check(valid + 12) and ship_check(valid - 12):
                        if ship_check(valid_start) and ship_check(valid_start + 12) and ship_check(
                                valid_start - 12):
                            korablik = Ship(ship, start_point, vector, deck, deck_war)
                            if valid_num == ship:  # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Å–µ –ª–∏ –∫–ª–µ—Ç–∫–∏ –±—ã–ª–∏ –ø—É—Å—Ç—ã –∏ –ø—Ä–∏–≥–æ–¥–Ω—ã –¥–ª—è –∂–∏–∑–Ω–∏ =)
                                # deck[start_point].name = 'üûì'
                                # deck[start_point].status = 3
                                deck[start_point] = korablik
                                next_point = start_point
                                for i in range(ship):
                                    deck[next_point] = korablik
                                    # deck[next_point].name = 'üûì'
                                    # deck[next_point].status = 3
                                    next_point += 1
                                return True
                            else:
                                return False
                        else:
                            return False
                    else:
                        return False
                else:
                    return False
            else:
                print('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–µ–∫—Ç–æ—Ä')

        test = ship_point(self.vector, self.start_index, self.type, self.deck, self.deck_war)

        return test


    def kill(self):
        def validtor(index):
            if self.deck[index].status != 1:
                return True
            else:
                return False

        start = self.start_index

        if self.vector == 'up':
            for i in range(
                    self.type + 1):  # –ë–µ—Ä–µ–º –Ω–∞ –æ–¥–∏–Ω –±–æ–ª—å—à–µ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Å—Ç–∞—Ä—Ç —É—á–∏—Ç—ã–≤–∞–ª —Ç—Ä–∏ –∫–ª–µ—Ç–∫–∏ –ü–û–î —Å—Ç–∞—Ä—Ç–æ–≤–æ–π.

                    if i == 0:  # –¢—Ä–∏ –∫–ª–µ—Ç–∫–∏ –ü–û–î –æ—Å–Ω–æ–≤–Ω–æ–π
                        left = start +12 - 1
                        right = start + 12 + 1
                        if validtor(start + 12):
                            self.deck[start + 12].status = 4
                            self.deck[start + 12].name = '‚ñ£'

                            self.deck_war[start + 12].name = '‚ñ£'

                        if validtor(left):
                            self.deck[left].status = 4
                            self.deck[left].name = '‚ñ£'

                            self.deck_war[left].name = '‚ñ£'

                        if validtor(right):
                            self.deck[right].status = 4
                            self.deck[right].name = '‚ñ£'

                            self.deck_war[right].name = '‚ñ£'



                        # –ü–µ—Ä–≤–∞—è –∫–ª–µ—Ç–∫–∞ –∫–æ—Ä–∞–±–ª—è.
                        left = start + 1
                        right = start - 1
                        if validtor(left):
                            self.deck[left].status = 4
                            self.deck[left].name = '‚ñ£'

                            self.deck_war[left].name = '‚ñ£'
                        if validtor(right):
                            self.deck[right].status = 4
                            self.deck[right].name = '‚ñ£'

                            self.deck_war[right].name = '‚ñ£'

                        start -= 12

                    elif i == self.type:  # –î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É –≤–≤–µ—Ä—Ö –Ω–∞–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π.

                        left = start - 1
                        right = start + 1
                        if validtor(start):
                            self.deck[start].status = 4
                            self.deck[start].name = '‚ñ£'

                            self.deck_war[start].name = '‚ñ£'
                        if validtor(left):
                            self.deck[left].status = 4
                            self.deck[left].name = '‚ñ£'

                            self.deck_war[left].name = '‚ñ£'
                        if validtor(right):
                            self.deck[right].status = 4
                            self.deck[right].name = '‚ñ£'

                            self.deck_war[right].name = '‚ñ£'

                    else:
                        left = start - 1
                        right = start + 1
                        if validtor(left):
                            self.deck[left].status = 4
                            self.deck[left].name = '‚ñ£'

                            self.deck_war[left].name = '‚ñ£'
                        if validtor(right):
                            self.deck[right].status = 4
                            self.deck[right].name = '‚ñ£'

                            self.deck_war[right].name = '‚ñ£'
                        start -= 12

        elif self.vector == 'down':
            for i in range(
                    self.type + 1):  # –ë–µ—Ä–µ–º –Ω–∞ –æ–¥–∏–Ω –±–æ–ª—å—à–µ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Å—Ç–∞—Ä—Ç —É—á–∏—Ç—ã–≤–∞–ª —Ç—Ä–∏ –∫–ª–µ—Ç–∫–∏ –ù–ê–î —Å—Ç–∞—Ä—Ç–æ–≤–æ–π.

                if i == 0:  # –¢—Ä–∏ –∫–ª–µ—Ç–∫–∏ –ü–û–î –æ—Å–Ω–æ–≤–Ω–æ–π
                    left = start - 12 - 1
                    right = start - 12 + 1
                    if validtor(start - 12):
                        self.deck[start - 12].status = 4
                        self.deck[start - 12].name = '‚ñ£'

                        self.deck_war[start - 12].name = '‚ñ£'
                    if validtor(left):
                        self.deck[left].status = 4
                        self.deck[left].name = '‚ñ£'

                        self.deck_war[left].name = '‚ñ£'
                    if validtor(right):
                        self.deck[right].status = 4
                        self.deck[right].name = '‚ñ£'

                        self.deck_war[right].name = '‚ñ£'

                    # –ü–µ—Ä–≤–∞—è –∫–ª–µ—Ç–∫–∞ –∫–æ—Ä–∞–±–ª—è.
                    left = start + 1
                    right = start - 1
                    if validtor(left):
                        self.deck[left].status = 4
                        self.deck[left].name = '‚ñ£'

                        self.deck_war[left].name = '‚ñ£'

                    if validtor(right):
                        self.deck[right].status = 4
                        self.deck[right].name = '‚ñ£'

                        self.deck_war[right].name = '‚ñ£'

                    start += 12

                elif i == self.type:  # –î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É –≤–≤–µ—Ä—Ö –Ω–∞–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π.

                    left = start - 1
                    right = start + 1
                    if validtor(start):
                        self.deck[start].status = 4
                        self.deck[start].name = '‚ñ£'

                        self.deck_war[start].name = '‚ñ£'
                    if validtor(left):
                        self.deck[left].status = 4
                        self.deck[left].name = '‚ñ£'

                        self.deck_war[left].name = '‚ñ£'
                    if validtor(right):
                        self.deck[right].status = 4
                        self.deck[right].name = '‚ñ£'

                        self.deck_war[right].name = '‚ñ£'

                else:
                    left = start - 1
                    right = start + 1
                    if validtor(left):
                        self.deck[left].status = 4
                        self.deck[left].name = '‚ñ£'

                        self.deck_war[left].name = '‚ñ£'
                    if validtor(right):
                        self.deck[right].status = 4
                        self.deck[right].name = '‚ñ£'

                        self.deck_war[right].name = '‚ñ£'
                    start += 12

        elif self.vector == 'right':
            for i in range(
                    self.type + 1):

                if i == 0:  # –¢—Ä–∏ –∫–ª–µ—Ç–∫–∏ –ø–µ—Ä–µ–¥
                    left = start - 1 - 12
                    right = start - 1 + 12
                    if validtor(start - 1):
                        self.deck[start - 1].status = 4
                        self.deck[start - 1].name = '‚ñ£'

                        self.deck_war[start - 1].name = '‚ñ£'
                    if validtor(left):
                        self.deck[left].status = 4
                        self.deck[left].name = '‚ñ£'

                        self.deck_war[left].name = '‚ñ£'
                    if validtor(right):
                        self.deck[right].status = 4
                        self.deck[right].name = '‚ñ£'

                        self.deck_war[right].name = '‚ñ£'

                    # –ü–µ—Ä–≤–∞—è –∫–ª–µ—Ç–∫–∞ –∫–æ—Ä–∞–±–ª—è.
                    left = start + 12
                    right = start - 12
                    if validtor(left):
                        self.deck[left].status = 4
                        self.deck[left].name = '‚ñ£'

                        self.deck_war[left].name = '‚ñ£'
                    if validtor(right):
                        self.deck[right].status = 4
                        self.deck[right].name = '‚ñ£'

                        self.deck_war[right].name = '‚ñ£'

                    start += 1

                elif i == self.type:

                    left = start - 12
                    right = start + 12
                    if validtor(start):
                        self.deck[start].status = 4
                        self.deck[start].name = '‚ñ£'

                        self.deck_war[start].name = '‚ñ£'
                    if validtor(left):
                        self.deck[left].status = 4
                        self.deck[left].name = '‚ñ£'

                        self.deck_war[left].name = '‚ñ£'
                    if validtor(right):
                        self.deck[right].status = 4
                        self.deck[right].name = '‚ñ£'

                        self.deck_war[right].name = '‚ñ£'

                else:
                    left = start - 12
                    right = start + 12
                    if validtor(left):
                        self.deck[left].status = 4
                        self.deck[left].name = '‚ñ£'

                        self.deck_war[left].name = '‚ñ£'
                    if validtor(right):
                        self.deck[right].status = 4
                        self.deck[right].name = '‚ñ£'

                        self.deck_war[right].name = '‚ñ£'
                    start += 1


        elif self.vector == 'left':
            for i in range(
                    self.type + 1):

                if i == 0:  # –¢—Ä–∏ –∫–ª–µ—Ç–∫–∏ –ø–µ—Ä–µ–¥
                    left = start + 1 - 12
                    right = start + 1 + 12
                    if validtor(start + 1):
                        self.deck[start + 1].status = 4
                        self.deck[start + 1].name = '‚ñ£'

                        self.deck_war[start + 1].name = '‚ñ£'
                    if validtor(left):
                        self.deck[left].status = 4
                        self.deck[left].name = '‚ñ£'

                        self.deck_war[left].name = '‚ñ£'
                    if validtor(right):
                        self.deck[right].status = 4
                        self.deck[right].name = '‚ñ£'

                        self.deck_war[right].name = '‚ñ£'

                    # –ü–µ—Ä–≤–∞—è –∫–ª–µ—Ç–∫–∞ –∫–æ—Ä–∞–±–ª—è.
                    left = start + 12
                    right = start - 12
                    if validtor(left):
                        self.deck[left].status = 4
                        self.deck[left].name = '‚ñ£'

                        self.deck_war[left].name = '‚ñ£'
                    if validtor(right):
                        self.deck[right].status = 4
                        self.deck[right].name = '‚ñ£'

                        self.deck_war[right].name = '‚ñ£'

                    start -= 1

                elif i == self.type:

                    left = start - 12
                    right = start + 12
                    if validtor(start):
                        self.deck[start].status = 4
                        self.deck[start].name = '‚ñ£'

                        self.deck_war[start].name = '‚ñ£'
                    if validtor(left):
                        self.deck[left].status = 4
                        self.deck[left].name = '‚ñ£'

                        self.deck_war[left].name = '‚ñ£'
                    if validtor(right):
                        self.deck[right].status = 4
                        self.deck[right].name = '‚ñ£'

                        self.deck_war[right].name = '‚ñ£'

                else:
                    left = start - 12
                    right = start + 12
                    if validtor(left):
                        self.deck[left].status = 4
                        self.deck[left].name = '‚ñ£'

                        self.deck_war[left].name = '‚ñ£'
                    if validtor(right):
                        self.deck[right].status = 4
                        self.deck[right].name = '‚ñ£'

                        self.deck_war[right].name = '‚ñ£'
                    start -= 1

    def damage(self, index):
        self.deck[index] = '‚ñ•'

        if self.health == 1:
            self.health -= 1
            self.status = 4
            __class__.kill(self)
            return 'kill'

        else:
            self.health -= 1
            return 'boom'



    def __repr__(self):
        if self.health > 0:
            return '‚ñ§'
        else:
            return '‚ñ¶'